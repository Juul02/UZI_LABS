import cv2
import numpy as np
import matplotlib.pyplot as plt
# original image
f = cv2.imread('C:/Users/yulia/OneDrive/Docs/Stydy/UZI/laba2/xraychest.jpg',0)

# plt.imshow(f, cmap='gray')
# plt.axis('off')
# plt.show()

# image in frequency domain
F = np.fft.fft2(f)
# plt.imshow(np.log1p(np.abs(F)), 
#            cmap='gray')
# plt.axis('off')

# plt.show()

Fshift = np.fft.fftshift(F)
# plt.imshow(np.log1p(np.abs(Fshift)), 
#            cmap='gray')
# plt.axis('off')
# plt.show()

# Filter: Low pass filter
M,N = f.shape
H = np.zeros((M,N), dtype=np.float32)
D0 = 50
for u in range(M):
    for v in range(N):
        D = np.sqrt((u-M/2)**2 + (v-N/2)**2)
        if D <= D0:
            H[u,v] = 1
        else:
            H[u,v] = 0
            
# plt.imshow(H, cmap='gray')
# plt.axis('off')
# plt.show()

# Ideal Low Pass Filtering
Gshift = Fshift * H
# plt.imshow(np.log1p(np.abs(Gshift)), 
#            cmap='gray')
# plt.axis('off')
# plt.show()

# Inverse Fourier Transform
G = np.fft.ifftshift(Gshift)
# plt.imshow(np.log1p(np.abs(G)), 
#            cmap='gray')
# plt.axis('off')
# plt.show()

g = np.abs(np.fft.ifft2(G))
# plt.imshow(g, cmap='gray')
# plt.axis('off')
# plt.show()


# Filter: High pass filter




# plt.imshow(H, cmap='gray')
# plt.axis('off')
# plt.show()

x = 2*f - g
plt.imshow(np.log1p(np.abs(x)), 
           cmap='gray')
plt.axis('off')
plt.show()

# Inverse Fourier Transform
G = np.fft.ifftshift(x)
plt.imshow(np.log1p(np.abs(G)), 
           cmap='gray')
plt.axis('off') 
plt.show()

g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()

# H_hp = 1 - H
# a = 0.5
# b = 2.5
# H_hfe = a + b * H_hp
# Gshift = Fshift * H_hfe

# plt.imshow(np.log1p(np.abs(Gshift)), 
#            cmap='gray')
# plt.axis('off')
# plt.show()

# # Inverse Fourier Transform
# G = np.fft.ifftshift(Gshift)
# plt.imshow(np.log1p(np.abs(G)), 
#            cmap='gray')
# plt.axis('off')
# plt.show()

# g = np.abs(np.fft.ifft2(G))
# plt.imshow(g, cmap='gray')
# plt.axis('off')
# plt.show()


a = 0.5
b = 2.5
H = a + b * (1 - H)
plt.imshow(H, cmap='gray')
plt.axis('off')
plt.show()

# Ideal High Pass Filtering
Gshift = Fshift * H
plt.imshow(np.log1p(np.abs(Gshift)), 
           cmap='gray')
plt.axis('off')
plt.show()

# Inverse Fourier Transform
G = np.fft.ifftshift(Gshift)
plt.imshow(np.log1p(np.abs(G)), 
           cmap='gray')
plt.axis('off')
plt.show()

g = np.abs(np.fft.ifft2(G))
plt.imshow(g, cmap='gray')
plt.axis('off')
plt.show()